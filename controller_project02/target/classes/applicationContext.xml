<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

		<!-- 开启注解扫描 -->
		<context:component-scan base-package="com.cg">
			<!-- 不扫描controller层注解 -->
			<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		</context:component-scan>
		
		<!-- 指定spring读取db.properties配置 -->
		<context:property-placeholder location="classpath:db.properties"/>
		
		<!-- 配置数据源 -->
	<!-- <bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
			<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/1612bssm"></property>
			<property name="user" value="root"></property>
			<property name="password" value="root"></property>
			<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		</bean> -->
		
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
			<property name="jdbcUrl" value="${mysql.url}"></property>
			<property name="user" value="${mysql.username}"></property>
			<property name="password" value="${mysql.password}"></property>
			<property name="driverClass" value="${mysql.driver}"></property>
		</bean>
		
		<!-- 配置 SqlSessionFactory工厂 -->
	<!-- 配置sqlSessionFactoryBean，目的：加载mybatis配置文件和映射文件，即替代原mybatis工具类的作用 -->
		<bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<!-- 注入数据源 -->
			<property name="dataSource" ref="dataSource"></property>
			<!-- 使用configLocation方式的好处     可以在mybatis配置文件中添加分页插件 -->
			<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
			<!-- 指定SQL文件   ,好处 省略mybatis主配置文件  -->
			<!-- <property name="mapperLocations" value="classpath:cn/com/bw/mapper/*Mapper.xml"/> -->
		</bean>
		
		<!-- 创建mapper扫描器 -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!-- 注入sqlsession -->
			<!-- 
				在mybatis-spring1.1.0以前，是通过<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
				将SqlSessionFactory对象注入到sqlSessionFactory，这样做可能会有一个问题，就是在初始化MyBatis时，
				jdbc.properties文件还没被加载进来，dataSource的属性值没有被替换，就开始构造sqlSessionFactory类，
				属性值就会加载失败。在1.1.0以后，MapperScannerConfigure提供了String类型的sqlSessionFactoryBeanName，
				这样将bean name注入到sqlSessionFactoryBeanName，这样就会等到spring初始化完成后，再构建sqlSessionFactory。	
			 -->
			<!-- <property name="sqlSessionFactory" ref="factory"></property> -->
			 <property name="sqlSessionFactoryBeanName" value="factory"></property>
			<!-- 指定扫描路径 -->
			<property name="basePackage" value="com.cg.mapper"></property>
		</bean>
		
		<!-- 配置MyBatis的事务管理器，因为MyBatis底层用的是JDBC事务管理器，所以在这里依然配置JDBC事务管理器 -->
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		<!-- 方式一;  用注解开启事务管理 -->
		<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
		
		<!-- 方式二; 配置增强，声明 -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<!--配置方法的管理策略 -->
			<tx:attributes>
				<tx:method name="add*" propagation="REQUIRED" />
				<tx:method name="insert*" propagation="REQUIRED" />
				<tx:method name="remove*" propagation="REQUIRED" />
				<tx:method name="delete*" propagation="REQUIRED" />
				<tx:method name="change*" propagation="REQUIRED" />
				<tx:method name="update*" propagation="REQUIRED" />
				<tx:method name="*" read-only="true" />
			</tx:attributes>
		</tx:advice>
		<!-- 配置aop -->
		<aop:config>
			<aop:pointcut
				expression="execution(* com.cg.service.*.*(..))"
				id="mycut" />
			<aop:advisor advice-ref="txAdvice" pointcut-ref="mycut" />
		</aop:config>

</beans>
